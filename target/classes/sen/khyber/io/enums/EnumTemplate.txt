package sen.khyber.io.enums;

import sen.khyber.reflect.Reflect;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Stream;

import lombok.Getter;

/**
 * 
 * 
 * @author Khyber Sen
 */
public enum $className {
    
    $constants
    
    $fields
    
    private $className($constructorArgs) {
        $constructorStatements
    }
    
    public static Stream<$className> toStream() {
        return Stream.of($className.values());
    }
    
    public static Set<$className> toSet() {
        final Set<$className> set = new HashSet<>();
        for (final $className $instanceName : $className.values()) {
            set.add($instanceName);
        }
        return set;
    }
    
    public static List<$className> toList() {
        final List<$className> list = new ArrayList<>();
        for (final $className $instanceName : $className.values()) {
            list.add($instanceName);
        }
        return list;
    }
    
    @Override
    public String toString() {
        return Reflect.toString(this);
    }
    
    public static void main(String[] args) throws Exception {
        for (final $className $instanceName : $className.values()) {
            System.out.println($instanceName);
        }
        $className.toStream().forEach(System.out::println);
    }
    
}